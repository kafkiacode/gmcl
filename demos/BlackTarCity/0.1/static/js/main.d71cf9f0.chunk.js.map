{"version":3,"sources":["utils/gui.js","design/basics/geometries.js","scenes/SceneSettings.js","design/buildings/Pillars.js","assistants/DebugCamera.js","direction/Loop.js","design/Cars/BladeRunnerCar.js","design/Cars/SimpleCar.js","actors/Driver.js","photography/cameras/DriverCamera.js","design/SimpleLineAlongTrack.js","design/Track.js","photography/Lights.js","utils/useStats.js","art/Effects.js","utils/random/getRandomScale.js","utils/stringColor.js","design/buildings/MesoHighRise.js","utils/random/getRandomWeights.js","design/Tunnels.js","scenes/City.js","art/palettes/index.js","scenes/citySettings.js","index.js"],"names":["gui","box","BoxBufferGeometry","sphere","SphereBufferGeometry","SceneSettings","createContext","Pillar","height","width","position","color","useTexture","texture","useMemo","TextureLoader","load","console","log","offset","useSpring","from","to","config","mass","friction","scale","geometry","attach","primitive","object","wrapS","RepeatWrapping","wrapT","repeat","Pillars","useContext","palette","folders","useGui","attr","addObject","colorObject","folderName","GUI","useState","map","v","Array","isArray","trackObj","setTrackObj","useEffect","addFolder","folder","Object","keys","filter","k","includes","forEach","key","add","slice","onChange","value","prev","addColor","DebugCamera","initialOn","target","initialOnRef","useRef","current","useThree","setDefaultCamera","camera","size","isCamOvertaken","setIsCamOvertaken","isOn","prevCam","thisCam","rotation","set","Math","PI","name","ref","aspect","onUpdate","self","updateProjectionMatrix","near","far","LoopContext","memo","children","loop","duration","start","spring","next","a","angle","reset","Provider","mesh","setMesh","GLTFLoader","gltf","scene","error","cars","SimpleCar","BladeRunnerCar","cityRadius","car","CarComponent","group","interpolate","cos","sin","DriverCamera","thisCamera","prevCamera","curveArgs","parent","args","curve","vertices","getPoints","v2","Vector3","x","y","distanceFromRadius","colors","track","simpleLinesCount","side","DoubleSide","wireframe","fill","_","idx","calcRadius","random","arcStart","arcLn","length","simpleLinesMapFn","props","stats","directionalLightsCount","lights","arcPos","intensity","setFromCylindricalCoords","mapDirectionalLights","distance","decay","useStats","Stats","document","body","appendChild","dom","apply","EffectComposer","RenderPass","UnrealBloomPass","Effects","composer","gl","toneMapping","ReinhardToneMapping","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","useRender","begin","render","end","isBloomOn","toggleBloom","requestAnimationFrame","attachArray","Vector2","resolution","exposure","strengh","threshold","radius","renderToScreen","getRandomScale","steps","variation","total","acc","d","colorOrNumber","toString","padStart","defaultMaterialAttrs","base","heightVariation","xzVariation","hslVariation","variations","i","getRandomWeights","heightVariations","sxVariations","szVariations","pxVariations","pzVariations","stepBaseX","stepBaseZ","stepBasePosX","stepBasePosZ","stepHeight","newColor","offsetHSL","colorParse","stringColor","randomValue","randomSign","hex","TunnelLightLine","material","setGeometry","lineWidth","Tunnel","lightTracksCount","tunnelProps","lightLineMapFn","useCallback","angleInTunnel","Tunnels","tunnels","count","defaultMapFn","SceneWrapper","settings","THREE","bgColor","style","backgroundColor","meshline","City","mesoHighRisesCount","JSON","parse","stringify","tunnelRadius","segmentAngle","displacement","defaultMesoHighRiseMapFn","Track","palettes","cyberpunkColorsNoBlack","flatten","defaultCitySettings","randomPick","niceColorPalettes","mergeCityWith","mergeDeepRight","driveCitySettings","CityWithGui","settingsKey","Component","WithGuiComponent","guiSettings","displayName","passedProps","withGui","ReactDOM","onCreated","getElementById"],"mappings":"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","file":"static/js/main.d71cf9f0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GUI } from 'dat.gui';\nimport { map } from 'ramda';\n\nlet gui;\n\nconst folders = {};\n\nexport function useGui(\n  { attr, addObject = {}, colorObject = {} },\n  folderName = 'Controls',\n) {\n  if (!gui) {\n    gui = new GUI(attr);\n  }\n\n  const [trackObj, setTrackObj] = useState(() => ({\n    ...map((v) => (Array.isArray(v) ? v[0] : v), addObject),\n    ...colorObject,\n  }));\n\n  useEffect(() => {\n    if (!folders[folderName]) {\n      folders[folderName] = gui.addFolder(folderName);\n    }\n    const folder = folders[folderName];\n\n    Object.keys(addObject)\n      .filter((k) =>\n        ['number', 'string', 'boolean'].includes(typeof addObject[k]),\n      )\n      .forEach((key) => {\n        folder\n          .add(\n            trackObj,\n            key,\n            ...(Array.isArray(addObject[key]) ? addObject[key].slice(1) : []),\n          )\n          .onChange((value) =>\n            setTrackObj((prev) => ({ ...prev, [key]: value })),\n          );\n      });\n    Object.keys(colorObject).forEach((key) => {\n      gui\n        .addColor(trackObj, key)\n        .onChange((value) =>\n          setTrackObj((prev) => ({ ...prev, [key]: value })),\n        );\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return { gui, ...trackObj };\n}\n\nexport function withGui({ settingsKey = 'settings' } = {}) {\n  return function WithGuiHoc(Component) {\n    function WithGuiComponent({ settings, ...props }) {\n      const guiSettings = useGui(\n        { addObject: settings },\n        Component.name || Component.displayName,\n      );\n      const passedProps = {\n        ...props,\n        [settingsKey]: guiSettings,\n      };\n      return <Component {...passedProps} />;\n    }\n    WithGuiComponent.displayName = `withGui(${Component.name ||\n      Component.displayName})`;\n    return WithGuiComponent;\n  };\n}\n","import { BoxBufferGeometry, SphereBufferGeometry } from 'three';\n\nexport const box = new BoxBufferGeometry();\nexport const sphere = new SphereBufferGeometry();\n","import { createContext } from 'react';\n\nconst SceneSettings = createContext({});\nexport default SceneSettings;\n","import React, { useMemo, useContext } from 'react';\nimport { TextureLoader, RepeatWrapping } from 'three';\nimport { useSpring, animated } from 'react-spring';\nimport { box } from '../basics/geometries';\nimport SceneSettings from '../../scenes/SceneSettings';\n\n// const textureUrl = './textures/payam-tavakoli-pt-hull-texture2.jpg';\n// const textureUrl = './textures/modern-building-facade-texture-free.jpg';\n// const textureUrl = './textures/modern-building-facade-texture-free2.jpg';\nconst textureUrl = './textures/TexturesCom_HighRiseNight0060_M_3.jpg';\n\nexport const Pillar = ({\n  height = 1,\n  width = 50,\n  position = [0, height / 2, 0],\n  color = 'lime',\n  useTexture = false,\n}) => {\n  const texture = useMemo(\n    () => useTexture && new TextureLoader().load(textureUrl),\n    [useTexture],\n  );\n  console.log(texture);\n  const { offset } = useSpring({\n    from: { offset: [0, 0] },\n    to: { offset: [-5, 10] },\n    config: { mass: 100, friction: 1000 },\n  });\n  return (\n    <mesh position={position} scale={[width, height, width]} geometry={box}>\n      <meshBasicMaterial attach=\"material\" color={color}>\n        {useTexture && (\n          <animated.primitive\n            attach=\"map\"\n            object={texture}\n            wrapS={RepeatWrapping}\n            wrapT={RepeatWrapping}\n            repeat={[2.5, 5]}\n            offset={offset}\n          />\n        )}\n      </meshBasicMaterial>\n    </mesh>\n  );\n};\n\nconst Pillars = () => {\n  const { palette, useTexture } = useContext(SceneSettings);\n  return (\n    <group>\n      <Pillar\n        useTexture={useTexture}\n        position={[500, 300 / 2, 500]}\n        height={300}\n        color={palette[0]}\n      />\n      <Pillar\n        useTexture={useTexture}\n        position={[500, 250 / 2, -500]}\n        height={250}\n        color={palette[1]}\n      />\n      <Pillar\n        useTexture={useTexture}\n        position={[-500, 350 / 2, 500]}\n        height={350}\n        color={palette[2]}\n      />\n      <Pillar\n        useTexture={useTexture}\n        position={[-500, 150 / 2, -500]}\n        height={150}\n        color=\"lime\"\n      />\n    </group>\n  );\n};\n\nexport default Pillars;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { useThree } from 'react-three-fiber';\nimport { useGui } from '../utils/gui';\n\nconst DebugCamera = ({\n  initialOn = false,\n  position = [0, 2000, 0],\n  target = [0, 0, 0],\n}) => {\n  const { current: initialOnRef } = useRef(initialOn);\n  const {\n    setDefaultCamera,\n    camera,\n    size: { width, height },\n  } = useThree();\n\n  const [isCamOvertaken, setIsCamOvertaken] = useState(false);\n  const { isOn } = useGui({ addObject: { isOn: initialOnRef } });\n\n  const prevCam = useRef(camera);\n  // const prevCam = useRef();\n  const thisCam = useRef();\n\n  useEffect(() => {\n    // this effect will run:\n    // on scenario 0 (no other camera), after the initial one, ONLY ONCE\n    // (bc the changes to state and camera are bound together)\n    // on scenario 1 (prev camera), after the initial one, ONCE?\n    // (first for camera.other, then for camera.this and overtaken=true)\n    if (camera === thisCam.current) {\n      // it's set by us, ignore\n      return;\n    }\n    if (!isCamOvertaken) {\n      // if the cam is not overtaken, ignore?\n      prevCam.current = camera;\n    }\n  }, [camera, isCamOvertaken]);\n\n  useEffect(() => {\n    if (isOn && !isCamOvertaken) {\n      setDefaultCamera(thisCam.current);\n      setIsCamOvertaken(true);\n    }\n    if (!isOn && isCamOvertaken) {\n      setDefaultCamera(prevCam.current);\n      setIsCamOvertaken(false);\n    }\n    return () => {\n      if (isCamOvertaken) {\n        setDefaultCamera(prevCam.current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOn, isCamOvertaken]);\n\n  useEffect(() => {\n    thisCam.current.rotation.set(Math.PI / 2, Math.PI, 0);\n  }, [target]);\n\n  return (\n    <perspectiveCamera\n      name=\"debugCamera\"\n      ref={thisCam}\n      aspect={width / height}\n      position={position}\n      onUpdate={(self) => self.updateProjectionMatrix()}\n      near={1}\n      far={10100}\n    />\n  );\n};\n\nexport default DebugCamera;\n","import React, { createContext, useContext, memo } from 'react';\nimport { useSpring } from 'react-spring/three';\nimport SceneSettings from '../scenes/SceneSettings';\n\nexport const LoopContext = createContext();\n\nexport default memo(function Loop({ children }) {\n  const {\n    loop: { duration, start },\n  } = useContext(SceneSettings);\n  const spring = useSpring({\n    to: async (next) => {\n      if (!start) {\n        return;\n      }\n      await next({ angle: Math.PI * 2 });\n      while (true) {\n        await next({ angle: Math.PI * 2, reset: true });\n      }\n    },\n    from: { angle: 0 },\n    config: { duration },\n  });\n\n  return (\n    <LoopContext.Provider value={spring.angle}>{children}</LoopContext.Provider>\n  );\n});\n","import React, { useState, useEffect, memo } from 'react';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nexport default memo(function BladeRunnerCar() {\n  const [mesh, setMesh] = useState();\n  useEffect(() => {\n    new GLTFLoader().load(\n      './models/blade_runner_car/scene.gltf',\n      (gltf) => {\n        gltf.scene.children[0].scale.set(0.5, 0.5, 0.5);\n        setMesh(gltf.scene.children[0]);\n      },\n      console.log,\n      console.error,\n    );\n  }, []);\n  return mesh ? (\n    <primitive\n      object={mesh}\n      position={[0, 0, 0]}\n      rotation={[Math.PI / -2 - 0.2, 0, 0]}\n    />\n  ) : null;\n});\n","import React, { memo } from 'react';\nimport { box, sphere } from '../basics/geometries';\n\nexport default memo(function SimpleCar() {\n  return (\n    <>\n      <mesh geometry={box} scale={[1, 1, 1]}>\n        <meshBasicMaterial color=\"purple\" attach=\"material\" />\n      </mesh>\n      <mesh geometry={sphere} scale={[0.5, 0.5, 0.5]} position={[0, 0, 0.5]}>\n        <meshBasicMaterial color=\"lightblue\" attach=\"material\" />\n      </mesh>\n    </>\n  );\n});\n","import React, { useContext, memo } from 'react';\nimport { animated } from 'react-spring/three';\nimport { LoopContext } from '../direction/Loop';\nimport BladeRunnerCar from '../design/Cars/BladeRunnerCar';\nimport SimpleCar from '../design/Cars/SimpleCar';\nimport SceneSettings from '../scenes/SceneSettings';\n\nconst cars = { SimpleCar, BladeRunnerCar };\n\nexport default memo(function Driver({ children }) {\n  const { cityRadius, car } = useContext(SceneSettings);\n  const value = useContext(LoopContext);\n  const CarComponent = cars[car] || SimpleCar;\n  return (\n    <animated.group\n      position={value.interpolate((v) => [\n        cityRadius * Math.cos(v),\n        0,\n        cityRadius * -Math.sin(v),\n      ])}\n      rotation={value.interpolate((v) => [0, v + Math.PI, 0])}\n    >\n      <CarComponent />\n      {children}\n    </animated.group>\n  );\n});\n","import React, { useEffect, useRef } from 'react';\nimport { useThree } from 'react-three-fiber';\n\nexport default function DriverCamera() {\n  const {\n    size: { width, height },\n    setDefaultCamera,\n    camera,\n  } = useThree();\n\n  const thisCamera = useRef();\n  const prevCamera = useRef(camera);\n  useEffect(() => {\n    prevCamera.current = camera;\n    setDefaultCamera(thisCamera.current);\n    return () => {\n      setDefaultCamera(prevCamera.current);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <group rotation={[0, Math.PI, 0]} position={[0, 1.6, -4]}>\n      <perspectiveCamera\n        near={0.001}\n        name=\"DriverCamera\"\n        ref={thisCamera}\n        aspect={width / height}\n        onUpdate={(self) => self.updateProjectionMatrix()}\n      />\n    </group>\n  );\n}\n","import React, { memo } from 'react';\nimport { Vector3 } from 'three';\n\nexport default memo(function SimpleLineAlongTrack({\n  position,\n  color,\n  curveArgs,\n}) {\n  return (\n    <line position={position}>\n      <geometry\n        attach=\"geometry\"\n        onUpdate={(self) => {\n          self.parent.geometry = self;\n        }}\n      >\n        <ellipseCurve\n          args={curveArgs}\n          onUpdate={(curve) => {\n            curve.parent.vertices = curve\n              .getPoints(50)\n              .map((v2) => new Vector3(v2.x, 0, v2.y));\n          }}\n        />\n      </geometry>\n      <lineBasicMaterial attach=\"material\" color={color} />\n    </line>\n  );\n});\n\nconst distanceFromRadius = 5;\nconst colors = ['red', 'blue', 'lightblue'];\n\nexport function defaultMapFn({ cityRadius }) {\n  return function mapFn(_, idx) {\n    const calcRadius =\n      cityRadius + Math.random() * distanceFromRadius - distanceFromRadius / 2;\n    const arcStart = Math.random() * Math.PI * 2;\n    const arcLn = arcStart + Math.PI / 32 + Math.random() * (Math.PI / 64);\n    return {\n      position: [0, 0.2 + Math.random() * 1.5, 0],\n      color: colors[idx % colors.length],\n      curveArgs: [0, 0, calcRadius, calcRadius, arcStart, arcLn],\n    };\n  };\n}\n","import React, { memo, useContext } from 'react';\nimport { DoubleSide } from 'three';\nimport SimpleLineAlongTrack, {\n  defaultMapFn as simpleLinesMapFn,\n} from './SimpleLineAlongTrack';\nimport SceneSettings from '../scenes/SceneSettings';\n\nexport default memo(function TrainTrack() {\n  const {\n    cityRadius = 500,\n    track: { simpleLinesCount = 10 },\n  } = useContext(SceneSettings);\n  return (\n    <group>\n      <mesh rotation={[Math.PI / 2, 0, 0]} position={[0, 0.2, 0]}>\n        <ringBufferGeometry\n          args={[cityRadius - 0.2, cityRadius + 0.2, 180, 1]}\n          attach=\"geometry\"\n        />\n        <meshBasicMaterial\n          color={0xffffff}\n          attach=\"material\"\n          side={DoubleSide}\n          wireframe\n        />\n      </mesh>\n      {Array(simpleLinesCount)\n        .fill()\n        .map(simpleLinesMapFn({ cityRadius }))\n        .map((props) => (\n          <SimpleLineAlongTrack {...props} />\n        ))}\n    </group>\n  );\n});\n","import React, { memo, useContext } from 'react';\nimport { Vector3 } from 'three';\nimport SceneSettings from '../scenes/SceneSettings';\n\nfunction mapDirectionalLights({ cityRadius }) {\n  return function mapFn(_, idx, { length }) {\n    const arcPos = ((Math.PI * 2) / length) * idx;\n    return {\n      intensity: 0.2,\n      position: new Vector3().setFromCylindricalCoords(\n        cityRadius + 100,\n        arcPos,\n        20,\n      ),\n      color: ['blue', 'red'][idx % length],\n    };\n  };\n}\n\nexport default memo(function Lights() {\n  const {\n    cityRadius,\n    lights: { directionalLightsCount },\n  } = useContext(SceneSettings);\n  return (\n    <group>\n      {Array(directionalLightsCount)\n        .fill()\n        .map(mapDirectionalLights({ cityRadius }))\n        .map((props, key) => (\n          <directionalLight {...props} key={key} />\n        ))}\n      <pointLight distance={0} decay={1} />\n    </group>\n  );\n});\n","import Stats from 'stats-js';\n\nlet stats;\n\nexport default function useStats() {\n  if (!stats) {\n    stats = new Stats();\n    document.body.appendChild(stats.dom);\n  }\n  return stats;\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport { apply, useRender, useThree } from 'react-three-fiber';\nimport { EffectComposer } from 'three/examples/jsm//postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm//postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm//postprocessing/UnrealBloomPass';\nimport { Vector2, ReinhardToneMapping } from 'three';\nimport useStats from '../utils/useStats';\n\napply({ EffectComposer, RenderPass, UnrealBloomPass });\n\nfunction Effects() {\n  const composer = useRef();\n\n  const {\n    gl,\n    scene,\n    camera,\n    size: { width, height },\n  } = useThree();\n\n  useEffect(() => {\n    gl.toneMapping = ReinhardToneMapping;\n    gl.setClearColor('#000', 1);\n    gl.setPixelRatio(window.devicePixelRatio);\n  }, [gl]);\n\n  useEffect(() => {\n    composer.current.setSize(width, height);\n  }, [width, height]);\n\n  const stats = useStats();\n\n  useRender(() => {\n    stats.begin();\n    composer.current.render();\n    stats.end();\n  }, true);\n\n  const [isBloomOn, toggleBloom] = useState();\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      toggleBloom(false);\n      requestAnimationFrame(() => toggleBloom(true));\n    });\n  }, [camera]);\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      {isBloomOn && (\n        <unrealBloomPass\n          attachArray=\"passes\"\n          args={[new Vector2(width, height)]}\n          resolution={[width, height]}\n          exposure={1}\n          strengh={1.8}\n          threshold={0}\n          radius={0.1}\n          renderToScreen\n        />\n      )}\n      <renderPass attachArray=\"passes\" args={[scene, camera]} />\n    </effectComposer>\n  );\n}\n\n// Effects.whyDidYouRender = true;\n\nexport default Effects;\n","export default function getRandomScale(steps, variation = 0) {\n  return function getScale() {\n    let total = 0;\n    let acc = 0;\n    return Array(steps)\n      .fill()\n      .map(() => {\n        const d = 1 + Math.random() * variation - variation / 2;\n        total += d;\n        return d;\n      })\n      .map((d) => {\n        acc += d / total;\n        return acc;\n      });\n  };\n}\n","export default function(colorOrNumber) {\n  return typeof colorOrNumber === 'number'\n    ? `#${colorOrNumber.toString(16).padStart(6, '0')}`\n    : colorOrNumber;\n}\n","import React, { memo, useState } from 'react';\nimport { parse as colorParse, offsetHSL } from 'canvas-sketch-util/color';\nimport {\n  value as randomValue,\n  sign as randomSign,\n} from 'canvas-sketch-util/random';\nimport { box } from '../basics/geometries';\nimport getRandomWeights from '../../utils/random/getRandomWeights';\nimport getRandomScale from '../../utils/random/getRandomScale';\nimport stringColor from '../../utils/stringColor';\n\nconst defaultMaterialAttrs = { color: 'blue' };\n\nexport function defaultMapFn({ cityRadius, tunnelRadius, palette }) {\n  return function mapFn(_, idx, { length }) {\n    const segmentAngle = ((Math.PI * 2) / length) * idx;\n    let displacement = Math.random() * 50 - 25;\n    displacement += (displacement > 0 ? 1 : -1) * (tunnelRadius + 2);\n    return {\n      hslVariation: 0.1,\n      heightVariation: 1,\n      xzVariation: 2,\n      steps: 10,\n      height: 5 + Math.random() * 10,\n      base: 2,\n      key: idx,\n      color: palette[idx % palette.length],\n      position: [\n        (cityRadius + displacement) * Math.cos(segmentAngle),\n        0,\n        (cityRadius + displacement) * -Math.sin(segmentAngle),\n      ],\n    };\n  };\n}\n\nexport default memo(function MesoHighRise({\n  height = 10,\n  base = 2,\n  steps = 3,\n  heightVariation = 0,\n  xzVariation = 0,\n  hslVariation = 0,\n  color,\n  ...props\n}) {\n  const [heightVariations] = useState(getRandomWeights(steps, heightVariation));\n  const [sxVariations] = useState(getRandomScale(steps, xzVariation));\n  const [szVariations] = useState(getRandomScale(steps, xzVariation));\n  const [pxVariations] = useState(getRandomScale(steps, xzVariation));\n  const [pzVariations] = useState(getRandomScale(steps, xzVariation));\n\n  return (\n    <group name=\"MesoHighRise\" {...props}>\n      {Array(steps)\n        .fill()\n        .map((_, idx) => {\n          const stepBaseX = (1 - (sxVariations[idx - 1] || 0)) * base;\n          const stepBaseZ = (1 - (szVariations[idx - 1] || 0)) * base;\n          const stepBasePosX =\n            ((1 / steps) * idx - (pxVariations[idx - 1] || 0)) * base;\n          const stepBasePosZ =\n            ((1 / steps) * idx - (pzVariations[idx - 1] || 0)) * base;\n          const stepHeight = heightVariations[idx] * height * (idx + 1);\n          const newColor = offsetHSL(\n            colorParse(stringColor(color)),\n            randomValue() * randomSign() * hslVariation * 0.5 * 360,\n            randomValue() * randomSign() * hslVariation * 100,\n            randomValue() * randomSign() * hslVariation * 100,\n          ).hex;\n\n          return (\n            <mesh\n              key={idx}\n              position={[stepBasePosX, stepHeight / 2, stepBasePosZ]}\n              geometry={box}\n              scale={[stepBaseX, stepHeight, stepBaseZ]}\n            >\n              <meshLambertMaterial\n                attach=\"material\"\n                {...defaultMaterialAttrs}\n                color={newColor}\n              />\n            </mesh>\n          );\n        })}\n    </group>\n  );\n});\n","export default function getRandomWeights(steps, variation = 0) {\n  return function getWeights() {\n    let total = 0;\n    const variations = [];\n    for (let i = 0; i < steps; i++) {\n      variations[i] = 1 + Math.random() * variation - variation / 2;\n      total += variations[i];\n    }\n    return variations.map((v) => v / total);\n  };\n}\n","import React, { useContext, useCallback, useRef } from 'react';\nimport { DoubleSide, Vector3 } from 'three';\nimport { apply } from 'react-three-fiber';\nimport * as meshline from 'three.meshline';\nimport SceneSettings from '../scenes/SceneSettings';\n\napply(meshline);\n\nfunction defaultMapFn({ cityRadius, radius, lightTracksCount }) {\n  return function mapFn(_, idx, { length }) {\n    return {\n      radius,\n      cityRadius,\n      arcStart: idx * ((Math.PI * 2) / length),\n      arcLn: Math.PI / 16 + Math.random() * (Math.PI / 16),\n      lightTracksCount,\n    };\n  };\n}\n\n// [0, 0, calcRadius, calcRadius, arcStart, arcLn],\nfunction TunnelLightLine({ arcStart, arcLn, radius, height }) {\n  const material = useRef();\n  return (\n    <mesh position={[0, height, 0]} rotation={[Math.PI, 0, 0]}>\n      <meshLine\n        onUpdate={(self) => {\n          self.parent.geometry = self.geometry;\n        }}\n      >\n        <geometry onUpdate={(self) => self.parent.setGeometry(self)}>\n          <ellipseCurve\n            args={[0, 0, radius, radius, arcStart, arcStart + arcLn]}\n            onUpdate={(curve) => {\n              curve.parent.vertices = curve\n                .getPoints(50)\n                .map((v2) => new Vector3(v2.x, 0, v2.y));\n            }}\n          />\n        </geometry>\n      </meshLine>\n      {/** MeshLineMaterial on the other hand is a regular material, so we can just attach it */}\n      <meshLineMaterial\n        attach=\"material\"\n        ref={material}\n        lineWidth={0.05}\n        color={0xffffff}\n      />\n    </mesh>\n  );\n}\n\nfunction Tunnel({\n  cityRadius,\n  radius,\n  arcStart,\n  arcLn,\n  lightTracksCount,\n  ...tunnelProps\n}) {\n  const lightLineMapFn = useCallback(\n    function lightLineMapFn(_, idx, { length }) {\n      const angleInTunnel = (Math.PI / length) * idx + (Math.PI / length) * 0.5;\n      return {\n        arcStart,\n        arcLn,\n        height: radius * 0.8 * Math.sin(angleInTunnel),\n        radius: cityRadius - radius * 0.9 * Math.cos(angleInTunnel),\n      };\n    },\n    [arcLn, arcStart, cityRadius, radius],\n  );\n\n  return (\n    <>\n      <group>\n        {Array(lightTracksCount)\n          .fill()\n          .map(lightLineMapFn)\n          .map((props) => (\n            <TunnelLightLine {...props} />\n          ))}\n        <group rotation={[Math.PI / -2, 0, 0]}>\n          <mesh {...tunnelProps} rotation={[0, 0, arcStart]}>\n            <torusBufferGeometry\n              attach=\"geometry\"\n              args={[cityRadius, radius, 8, 6, arcLn]}\n            />\n            <meshBasicMaterial color={0} attach=\"material\" side={DoubleSide} />\n          </mesh>\n        </group>\n      </group>\n    </>\n  );\n}\n\nexport default function Tunnels() {\n  const {\n    cityRadius,\n    tunnels: { radius, count, lightTracksCount },\n  } = useContext(SceneSettings);\n  return (\n    <>\n      {Array(count)\n        .fill()\n        .map(defaultMapFn({ cityRadius, radius, lightTracksCount }))\n        .map((props) => (\n          <Tunnel {...props} />\n        ))}\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useRender } from 'react-three-fiber';\nimport { DoubleSide } from 'three';\nimport * as THREE from 'three';\nimport Pillars from '../design/buildings/Pillars';\nimport DebugCamera from '../assistants/DebugCamera';\nimport Driver from '../actors/Driver';\nimport Loop from '../direction/Loop';\nimport DriverCamera from '../photography/cameras/DriverCamera';\nimport Track from '../design/Track';\nimport Lights from '../photography/Lights';\nimport SceneSettings from './SceneSettings';\nimport Effects from '../art/Effects';\nimport useStats from '../utils/useStats';\nimport MesoHighRise, {\n  defaultMapFn as defaultMesoHighRiseMapFn,\n} from '../design/buildings/MesoHighRise';\nimport Tunnels from '../design/Tunnels';\nimport stringColor from '../utils/stringColor';\nexport function SceneWrapper({ settings, children }) {\n  window.THREE = THREE;\n  const stats = useStats();\n  const { isBloomOn, bgColor } = settings;\n\n  useRender(({ gl, scene, camera }) => {\n    if (!isBloomOn) {\n      stats.begin();\n      gl.render(scene, camera);\n      stats.end();\n    }\n  }, !isBloomOn);\n\n  useEffect(() => {\n    document.body.style.backgroundColor = stringColor(bgColor);\n  }, [bgColor]);\n\n  return (\n    <SceneSettings.Provider value={settings}>{children}</SceneSettings.Provider>\n  );\n}\n\nfunction City({ settings }) {\n  // const stats = useStats();\n  const {\n    mesoHighRisesCount = 1,\n    isBloomOn,\n    tunnels,\n    cityRadius,\n    palette,\n  } = settings;\n  console.log(JSON.parse(JSON.stringify(settings)));\n  return (\n    <SceneWrapper settings={settings}>\n      <Loop>\n        <DebugCamera />\n        <Pillars />\n        <Driver>\n          <DriverCamera />\n        </Driver>\n        {Array(mesoHighRisesCount)\n          .fill()\n          .map(\n            defaultMesoHighRiseMapFn({\n              cityRadius,\n              palette,\n              tunnelRadius: tunnels.radius,\n            }),\n          )\n          .map((props) => (\n            <MesoHighRise {...props} />\n          ))}\n        <Track />\n        <mesh name=\"groundPlane\" rotation={[Math.PI / 2, 0, 0]}>\n          <planeGeometry args={[10000, 10000]} attach=\"geometry\" />\n          <meshBasicMaterial\n            color={0x000008}\n            attach=\"material\"\n            side={DoubleSide}\n          />\n        </mesh>\n        <Lights />\n        {isBloomOn && <Effects />}\n        <ambientLight color=\"#59314f\" intensity={0.4} />\n        <Tunnels />\n      </Loop>\n    </SceneWrapper>\n  );\n}\n\nexport default City;\n","import { flatten } from 'ramda';\n\nimport * as niceColorPalettes from 'nice-color-palettes';\n\n/**\n * Credits\n * https://www.colourlovers.com/palette/1741341/Cyberpunk_Roses\n * https://www.colourlovers.com/palette/2420454/cyberpunk\n * https://www.colourlovers.com/palette/571460/johnny_mnemonic\n * https://www.colourlovers.com/palette/2127848/CyberPunk\n */\n\nexport const cyberpunkRoses = [\n  0x020314,\n  0x5932e6,\n  0x8632e6,\n  0xb332e6,\n  0xe032e6,\n];\nexport const cyberpunk = [0x3d615f, 0x61d6c4, 0x71918c, 0x25343b, 0x212429];\nexport const johnnyMnemonic = [\n  0x94f700,\n  0xffd4ff,\n  0xde00a6,\n  0x470047,\n  0x000000,\n];\nexport const CyberPunk = [0x00f9ff, 0xd900ff, 0x14ff00, 0xff00ef, 0x000000];\nexport const palettes = [cyberpunkRoses, cyberpunk, johnnyMnemonic, CyberPunk];\n\nexport const palettesNoBlack = palettes.map((colors) =>\n  colors.filter((d) => d !== 0),\n);\n\nexport const allCyberpunkColors = flatten(palettes);\nexport const cyberpunkColorsNoBlack = allCyberpunkColors.filter((d) => d !== 0);\n\nexport { niceColorPalettes };\n","import { mergeDeepRight } from 'ramda';\nimport { pick as randomPick } from 'canvas-sketch-util/random';\nimport { niceColorPalettes, cyberpunkColorsNoBlack } from '../art/palettes';\n\nexport const defaultCitySettings = {\n  palette: [randomPick(niceColorPalettes)], // TODO: fix gui so an array is an array\n  bgColor: 0xffffff,\n  cityRadius: 10,\n  lights: {\n    directionalLightsCount: 4,\n  },\n  loop: { duration: 250000, start: true },\n  isBloomOn: false,\n  mesoHighRisesCount: 40,\n  track: { simpleLinesCount: 10 },\n  tunnels: {\n    count: 0,\n    radius: 2.5,\n    lightTracksCount: 0,\n  },\n  car: 'SimpleCar',\n  useTexture: false,\n};\n\nconst mergeCityWith = mergeDeepRight(defaultCitySettings);\n\nexport const basicCitySettings = mergeCityWith({});\n\nexport const driveCitySettings = mergeCityWith({\n  bgColor: 0,\n  // isBloomOn: true,\n  cityRadius: 500,\n  palette: [cyberpunkColorsNoBlack],\n  mesoHighRisesCount: 400,\n  track: { simpleLinesCount: 250 },\n  loop: { duration: 60000, start: true },\n  tunnels: {\n    count: 4,\n    lightTracksCount: 5,\n  },\n  car: 'BladeRunnerCar',\n  useTexture: true,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas } from 'react-three-fiber';\nimport City from './scenes/City';\nimport {\n  // eslint-disable-next-line no-unused-vars\n  driveCitySettings,\n  // eslint-disable-next-line no-unused-vars\n  defaultCitySettings,\n  // eslint-disable-next-line no-unused-vars\n  basicCitySettings,\n} from './scenes/citySettings';\nimport { withGui } from './utils/gui';\nimport './index.css';\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\n  whyDidYouRender(React);\n}\n\nconst CityWithGui = withGui()(City);\n\nReactDOM.render(\n  <Canvas\n    camera={{ name: 'CanvasCamera' }}\n    onCreated={({ scene }) => {\n      window.scene = scene;\n    }}\n  >\n    {/* <CityWithGui settings={basicCitySettings} /> */}\n    {/* <CityWithGui settings={defaultCitySettings} /> */}\n    <CityWithGui settings={driveCitySettings} />\n  </Canvas>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}